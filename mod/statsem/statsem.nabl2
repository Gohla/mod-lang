module statsem

imports

  signatures/-

signature

  namespaces Mod Def
  
  name resolution
  
    labels          P I
    order           D < I, D < P, I < P
    well-formedness P*.I*

rules // init

  init ^ (s_root) :=
    new s_root,
    distinct/name D(s_root)/Def | error "Duplicate definitions" @NAMES,
    distinct/name D(s_root)/Mod | error "Duplicate modules" @NAMES.
        
rules // program

  [[ Program(es) ^ (s_pub) ]] :=
    new s_prv,
    s_prv -P-> s_pub,
    distinct/name D(s_prv)/Def | error "Duplicate definitions" @NAMES,
    distinct/name D(s_prv)/Mod | error "Duplicate modules" @NAMES,
    Map2 [[ es ^ (s_pub, s_prv) ]].

rules // module

  [[ Mod(Pub(), id_mod, es) ^ (s_pub, s_prv) ]] :=
    Mod{id_mod} <- s_pub,
    new s_mod_pub,
    s_mod_pub -P-> s_prv,
    distinct/name D(s_mod_pub)/Def | error "Duplicate definitions" @NAMES,
    distinct/name D(s_mod_pub)/Mod | error "Duplicate modules" @NAMES,
    new s_mod_prv,
    s_mod_prv -P-> s_mod_pub,
    Mod{id_mod} =I=> s_mod_pub,
    distinct/name D(s_mod_prv)/Def | error "Duplicate definitions" @NAMES,
    distinct/name D(s_mod_prv)/Mod | error "Duplicate modules" @NAMES,
    Map2 [[ es ^ (s_mod_pub, s_mod_prv) ]].
    
  [[ Mod(Prv(), id_mod, es) ^ (s_pub, s_prv) ]] :=
    Mod{id_mod} <- s_prv,
    new s_mod_pub,
    s_mod_pub -P-> s_prv,
    distinct/name D(s_mod_pub)/Def | error "Duplicate definitions" @NAMES,
    distinct/name D(s_mod_pub)/Mod | error "Duplicate modules" @NAMES,
    new s_mod_prv,
    s_mod_prv -P-> s_mod_pub,
    distinct/name D(s_mod_prv)/Def | error "Duplicate definitions" @NAMES,
    distinct/name D(s_mod_prv)/Mod | error "Duplicate modules" @NAMES,
    Map2 [[ es ^ (s_mod_pub, s_mod_prv) ]].

rules // import
    
  [[ Imp(Pub(), id_mod) ^ (s_pub, s_prv) ]] :=
    ImpId [[ id_mod ^ (s_pub, s_pub) ]].

  [[ Imp(Prv(), id_mod) ^ (s_pub, s_prv) ]] :=
    ImpId [[ id_mod ^ (s_pub, s_prv) ]].
  

  ImpId [[ Id(id_mod) ^ (s_mod, s_out) ]] :=
    Mod{id_mod} -> s_mod,
    Mod{id_mod} <=I= s_out,
    Mod{id_mod} |-> m.

  ImpId [[ QId(id_sub, id_mod) ^ (s_mod, s_out) ]] :=
    new s_imp,
    ImpId [[ id_sub ^ (s_mod, s_imp) ]],
    Mod{id_mod} -> s_imp,
    Mod{id_mod} <=I= s_out,
    Mod{id_mod} |-> m.

rules // definition

  [[ Def(Pub(), id_def, e) ^ (s_pub, s_prv) ]] :=
    Def{id_def} <- s_pub,
    [[ e ^ (s_prv, s_pub) : ty]],
    Def{id_def} : ty !.
    
  [[ Def(Prv(), id_def, e) ^ (_, s_prv) ]] :=
    Def{id_def} <- s_prv,
    [[ e ^ (s_prv, s_pub) : ty]],
    Def{id_def} : ty !.
    
  [[ DefT(Pub(), id_def, ty_d, e) ^ (s_pub, s_prv) ]] :=
    Def{id_def} <- s_pub,
    Def{id_def} : ty_d !,
    [[ e ^ (s_prv, s_pub) : ty_e]],
    ty_e == ty_d | error $[Expected [ty_d] but found [ty_e]] @ e.
    
  [[ DefT(Prv(), id_def, ty_d, e) ^ (_, s_prv) ]] :=
    Def{id_def} <- s_prv,
    Def{id_def} : ty_d !,
    [[ e ^ (s_prv, s_pub) : ty_e]],
    ty_e == ty_d | error $[Expected [ty_d] but found [ty_e]] @ e.

rules // expression

  [[ Ref(id_def) ^ (s_def, _) : ty ]] :=
    Def{id_def} -> s_def,
    Def{id_def} |-> d,
    d : ty.

  [[ QRef(id_mod, id_def) ^ (_, s_mod) : ty ]] :=
    new s_imp,
    ImpId [[ id_mod ^ (s_mod, s_imp) ]],
    Def{id_def} -> s_imp,
    Def{id_def} |-> d,
    d : ty.


  [[ Add(l, r) ^ (s_def, s_mod) : IntTy() ]] :=
    [[ l ^ (s_def, s_mod) : ty_l]],
    ty_l == IntTy() | error $[Expected integer] @ l,
    [[ r ^ (s_def, s_mod) : ty_r]],
    ty_r == IntTy() | error $[Expected integer] @ r.

  [[ Or(l, r) ^ (s_def, s_mod) : BoolTy() ]] :=
    [[ l ^ (s_def, s_mod) : ty_l]],
    ty_l == BoolTy() | error $[Expected boolean] @ l,
    [[ r ^ (s_def, s_mod) : ty_r]],
    ty_r == BoolTy() | error $[Expected boolean] @ r.


  [[ Int(_)  ^ (_, _) : IntTy()  ]] := true.
  [[ True()  ^ (_, _) : BoolTy() ]] := true.
  [[ False() ^ (_, _) : BoolTy() ]] := true.
