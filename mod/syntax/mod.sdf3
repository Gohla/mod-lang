module mod

imports lex

context-free syntax
  
Start.Program = <<{Elem "\n"}*>>

Elem.Mod  = <<Visibility> mod <ID> {
  <{Elem "\n"}*>
}
>
Elem.Imp = <<Visibility> imp <MId>.*>
Elem.Def  = <<Visibility> def <ID> = <Exp>>
Elem.DefT = <<Visibility> def <ID> : <Type> = <Exp>>

MId.Id = <<ID>>
MId.QId = <<MId>.<ID>>

Visibility.Pub = <pub>
Visibility.Prv = <prv>

Exp.True  = <true>
Exp.False = <false>
Exp.Int   = <<INT>>
Exp.Add   = <<Exp> + <Exp>> {left}
Exp.Or    = <<Exp> | <Exp>> {left}
Exp.Ref   = <<ID>> {avoid}
Exp.QRef  = <<MId>.<ID>> {avoid}

Type.IntTy  = <int>
Type.BoolTy = <bool>

context-free priorities

{ left : Exp.Add Exp.Or }

context-free start-symbols

Start

template options

keyword -/- [a-zA-Z]
